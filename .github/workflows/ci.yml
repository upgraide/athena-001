name: CI Pipeline

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: athena-finance-001
  REGION: europe-west3
  ARTIFACT_REGISTRY: europe-west3-docker.pkg.dev
  REPOSITORY: finance-containers

jobs:
  # Job 1: Code Quality
  quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - run: npm ci
      
      - name: Lint check
        run: npm run lint
      
      - name: Type check
        run: npm run typecheck
      
      - name: Security audit
        run: npm audit --audit-level=high

  # Job 2: Test
  test:
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - run: npm ci
      
      - name: Run tests
        run: npm test
        env:
          NODE_ENV: test
          JWT_ACCESS_SECRET: test-secret
          JWT_REFRESH_SECRET: test-refresh-secret

  # Job 3: Build Images
  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        service:
          - name: auth-service
            dockerfile: src/auth-service/Dockerfile
          - name: finance-master
            dockerfile: Dockerfile
            build-arg: finance-master
          - name: document-ai
            dockerfile: Dockerfile
            build-arg: document-ai
          - name: transaction-analyzer
            dockerfile: Dockerfile
            build-arg: transaction-analyzer
          - name: insight-generator
            dockerfile: Dockerfile
            build-arg: insight-generator
    steps:
      - uses: actions/checkout@v4
      
      - id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
      
      - uses: google-github-actions/setup-gcloud@v2
      
      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY }}
      
      - name: Build and push
        run: |
          IMAGE="${{ env.ARTIFACT_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ matrix.service.name }}"
          
          # Build with appropriate dockerfile and args
          if [ "${{ matrix.service.name }}" = "auth-service" ]; then
            docker build -f ${{ matrix.service.dockerfile }} -t $IMAGE:${{ github.sha }} -t $IMAGE:latest .
          else
            docker build -f ${{ matrix.service.dockerfile }} \
              --build-arg SERVICE_NAME=${{ matrix.service.build-arg }} \
              -t $IMAGE:${{ github.sha }} -t $IMAGE:latest .
          fi
          
          # Push both tags
          docker push $IMAGE:${{ github.sha }}
          docker push $IMAGE:latest

  # Job 4: Terraform Check
  terraform:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      
      - uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
      
      - uses: hashicorp/setup-terraform@v3
      
      - name: Terraform Init
        working-directory: infrastructure/terraform
        run: terraform init
      
      - name: Terraform Format
        working-directory: infrastructure/terraform
        run: terraform fmt -check
      
      - name: Terraform Validate
        working-directory: infrastructure/terraform
        run: terraform validate
      
      - name: Terraform Plan
        working-directory: infrastructure/terraform
        id: plan
        run: terraform plan -no-color
        continue-on-error: true
      
      - uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Plan ðŸ“–\n
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })